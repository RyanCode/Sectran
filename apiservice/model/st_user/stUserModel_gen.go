// Code generated by goctl. DO NOT EDIT.

package st_user

import (
	"context"
	"database/sql"
	"fmt"
	"sectran/apiservice/internal/types"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stUserFieldNames          = builder.RawFieldNames(&StUser{})
	stUserRows                = strings.Join(stUserFieldNames, ",")
	stUserRowsExpectAutoSet   = strings.Join(stringx.Remove(stUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stUserRowsWithPlaceHolder = strings.Join(stringx.Remove(stUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	stUserModel interface {
		Insert(ctx context.Context, data *StUser) (sql.Result, error)
		Find(ctx context.Context, user *types.UserVisibleInfo)(*StUser, error)
		Update(ctx context.Context, data *StUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultStUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StUser struct {
		UserId      int64          `db:"user_id"`       // 用户ID
		Account     string         `db:"account"`       // 用户账号
		Password    string         `db:"password"`      // 用户密码
		Username    sql.NullString `db:"username"`      // 用户姓名
		DeptId      int64          `db:"dept_id"`       // 用户所属部门ID
		Disable     int64          `db:"disable"`       // 账号是否禁用
		Description sql.NullString `db:"description"`   // 账号描述
		CreateTime  time.Time      `db:"create_time"`   // 创建时间
		CreateByUid int64          `db:"create_by_uid"` // 创建人
		IsDelete    int64          `db:"is_delete"`     // 是否被删除
		RoleId      int64          `db:"role_id"`       // 用户角色ID
	}
)

func newStUserModel(conn sqlx.SqlConn) *defaultStUserModel {
	return &defaultStUserModel{
		conn:  conn,
		table: "`st_user`",
	}
}

func (m *defaultStUserModel) withSession(session sqlx.Session) *defaultStUserModel {
	return &defaultStUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`st_user`",
	}
}

func (m *defaultStUserModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultStUserModel) Find(ctx context.Context, user *types.UserVisibleInfo) (*StUser, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", stUserRows, m.table)
	var resp StUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, user.UserId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStUserModel) Insert(ctx context.Context, data *StUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, stUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Account, data.Password, data.Username, data.DeptId, data.Disable, data.Description, data.CreateByUid, data.IsDelete, data.RoleId)
	return ret, err
}

func (m *defaultStUserModel) Update(ctx context.Context, data *StUser) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, stUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Account, data.Password, data.Username, data.DeptId, data.Disable, data.Description, data.CreateByUid, data.IsDelete, data.RoleId, data.UserId)
	return err
}

func (m *defaultStUserModel) tableName() string {
	return m.table
}
