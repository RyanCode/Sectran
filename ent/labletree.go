// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sectran_admin/ent/labletree"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LableTree is the model entity for the LableTree schema.
type LableTree struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// lable name|标签名称
	Name string `json:"name,omitempty"`
	// lable type|标签类型
	Type uint `json:"type,omitempty"`
	// lable icon|标签图标
	Icon string `json:"icon,omitempty"`
	// lable content|标签内容
	Content string `json:"content,omitempty"`
	// parent lable id|父标签id
	ParentLable uint64 `json:"parent_lable,omitempty"`
	// lable target type|标签目标类型
	LableTargetType uint16 `json:"lable_target_type,omitempty"`
	// parent lables id,split by ','|父标签id集合升序排列,逗号分隔
	ParentLables string `json:"parent_lables,omitempty"`
	// lable owner,user ID|标签所属者,用户ID
	LableOwner uint64 `json:"lable_owner,omitempty"`
	// child lable can inherit parents|标签是否可以继承
	Inherit bool `json:"inherit,omitempty"`
	// related labels id,split by ','|关联标签id集合升序排列,逗号分隔
	RelatedLables string `json:"related_lables,omitempty"`
	// label description|标签描述
	Description string `json:"description,omitempty"`
	// label extented|标签拓展
	Ext1 string `json:"ext1,omitempty"`
	// label extented|标签拓展
	Ext2         string `json:"ext2,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LableTree) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case labletree.FieldInherit:
			values[i] = new(sql.NullBool)
		case labletree.FieldID, labletree.FieldType, labletree.FieldParentLable, labletree.FieldLableTargetType, labletree.FieldLableOwner:
			values[i] = new(sql.NullInt64)
		case labletree.FieldName, labletree.FieldIcon, labletree.FieldContent, labletree.FieldParentLables, labletree.FieldRelatedLables, labletree.FieldDescription, labletree.FieldExt1, labletree.FieldExt2:
			values[i] = new(sql.NullString)
		case labletree.FieldCreatedAt, labletree.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LableTree fields.
func (lt *LableTree) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case labletree.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lt.ID = uint64(value.Int64)
		case labletree.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lt.CreatedAt = value.Time
			}
		case labletree.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lt.UpdatedAt = value.Time
			}
		case labletree.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lt.Name = value.String
			}
		case labletree.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				lt.Type = uint(value.Int64)
			}
		case labletree.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				lt.Icon = value.String
			}
		case labletree.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				lt.Content = value.String
			}
		case labletree.FieldParentLable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_lable", values[i])
			} else if value.Valid {
				lt.ParentLable = uint64(value.Int64)
			}
		case labletree.FieldLableTargetType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lable_target_type", values[i])
			} else if value.Valid {
				lt.LableTargetType = uint16(value.Int64)
			}
		case labletree.FieldParentLables:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_lables", values[i])
			} else if value.Valid {
				lt.ParentLables = value.String
			}
		case labletree.FieldLableOwner:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lable_owner", values[i])
			} else if value.Valid {
				lt.LableOwner = uint64(value.Int64)
			}
		case labletree.FieldInherit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field inherit", values[i])
			} else if value.Valid {
				lt.Inherit = value.Bool
			}
		case labletree.FieldRelatedLables:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field related_lables", values[i])
			} else if value.Valid {
				lt.RelatedLables = value.String
			}
		case labletree.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				lt.Description = value.String
			}
		case labletree.FieldExt1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext1", values[i])
			} else if value.Valid {
				lt.Ext1 = value.String
			}
		case labletree.FieldExt2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext2", values[i])
			} else if value.Valid {
				lt.Ext2 = value.String
			}
		default:
			lt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LableTree.
// This includes values selected through modifiers, order, etc.
func (lt *LableTree) Value(name string) (ent.Value, error) {
	return lt.selectValues.Get(name)
}

// Update returns a builder for updating this LableTree.
// Note that you need to call LableTree.Unwrap() before calling this method if this LableTree
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LableTree) Update() *LableTreeUpdateOne {
	return NewLableTreeClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LableTree entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LableTree) Unwrap() *LableTree {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LableTree is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LableTree) String() string {
	var builder strings.Builder
	builder.WriteString("LableTree(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(lt.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", lt.Type))
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(lt.Icon)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(lt.Content)
	builder.WriteString(", ")
	builder.WriteString("parent_lable=")
	builder.WriteString(fmt.Sprintf("%v", lt.ParentLable))
	builder.WriteString(", ")
	builder.WriteString("lable_target_type=")
	builder.WriteString(fmt.Sprintf("%v", lt.LableTargetType))
	builder.WriteString(", ")
	builder.WriteString("parent_lables=")
	builder.WriteString(lt.ParentLables)
	builder.WriteString(", ")
	builder.WriteString("lable_owner=")
	builder.WriteString(fmt.Sprintf("%v", lt.LableOwner))
	builder.WriteString(", ")
	builder.WriteString("inherit=")
	builder.WriteString(fmt.Sprintf("%v", lt.Inherit))
	builder.WriteString(", ")
	builder.WriteString("related_lables=")
	builder.WriteString(lt.RelatedLables)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(lt.Description)
	builder.WriteString(", ")
	builder.WriteString("ext1=")
	builder.WriteString(lt.Ext1)
	builder.WriteString(", ")
	builder.WriteString("ext2=")
	builder.WriteString(lt.Ext2)
	builder.WriteByte(')')
	return builder.String()
}

// LableTrees is a parsable slice of LableTree.
type LableTrees []*LableTree
