// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sectran_admin/ent/accesspolicy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccessPolicy is the model entity for the AccessPolicy schema.
type AccessPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AccessPolicy name|策略名称
	Name string `json:"name,omitempty"`
	// AccessPolicy power|策略优先级、值越小优先级约高
	Power int32 `json:"power,omitempty"`
	// ID of the AccessPolicy's department.|策略所属部门
	DepartmentID uint64 `json:"department_id,omitempty"`
	// 策略关联用户
	Users string `json:"users,omitempty"`
	// 策略关联账号
	Accounts string `json:"accounts,omitempty"`
	// AccessPolicy effective time rangw start|策略生效时间开始
	EffecteTimeStart time.Time `json:"effecte_time_start,omitempty"`
	// AccessPolicy effective time rangw end|策略生效时间结束
	EffecteTimeEnd time.Time `json:"effecte_time_end,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesspolicy.FieldID, accesspolicy.FieldPower, accesspolicy.FieldDepartmentID:
			values[i] = new(sql.NullInt64)
		case accesspolicy.FieldName, accesspolicy.FieldUsers, accesspolicy.FieldAccounts:
			values[i] = new(sql.NullString)
		case accesspolicy.FieldCreatedAt, accesspolicy.FieldUpdatedAt, accesspolicy.FieldEffecteTimeStart, accesspolicy.FieldEffecteTimeEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessPolicy fields.
func (ap *AccessPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesspolicy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = uint64(value.Int64)
		case accesspolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case accesspolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case accesspolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case accesspolicy.FieldPower:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power", values[i])
			} else if value.Valid {
				ap.Power = int32(value.Int64)
			}
		case accesspolicy.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				ap.DepartmentID = uint64(value.Int64)
			}
		case accesspolicy.FieldUsers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field users", values[i])
			} else if value.Valid {
				ap.Users = value.String
			}
		case accesspolicy.FieldAccounts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accounts", values[i])
			} else if value.Valid {
				ap.Accounts = value.String
			}
		case accesspolicy.FieldEffecteTimeStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effecte_time_start", values[i])
			} else if value.Valid {
				ap.EffecteTimeStart = value.Time
			}
		case accesspolicy.FieldEffecteTimeEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effecte_time_end", values[i])
			} else if value.Valid {
				ap.EffecteTimeEnd = value.Time
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessPolicy.
// This includes values selected through modifiers, order, etc.
func (ap *AccessPolicy) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// Update returns a builder for updating this AccessPolicy.
// Note that you need to call AccessPolicy.Unwrap() before calling this method if this AccessPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AccessPolicy) Update() *AccessPolicyUpdateOne {
	return NewAccessPolicyClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AccessPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AccessPolicy) Unwrap() *AccessPolicy {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessPolicy is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AccessPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AccessPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	builder.WriteString("power=")
	builder.WriteString(fmt.Sprintf("%v", ap.Power))
	builder.WriteString(", ")
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.DepartmentID))
	builder.WriteString(", ")
	builder.WriteString("users=")
	builder.WriteString(ap.Users)
	builder.WriteString(", ")
	builder.WriteString("accounts=")
	builder.WriteString(ap.Accounts)
	builder.WriteString(", ")
	builder.WriteString("effecte_time_start=")
	builder.WriteString(ap.EffecteTimeStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effecte_time_end=")
	builder.WriteString(ap.EffecteTimeEnd.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccessPolicies is a parsable slice of AccessPolicy.
type AccessPolicies []*AccessPolicy
