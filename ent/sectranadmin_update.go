// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sectran_admin/ent/predicate"
	"sectran_admin/ent/sectranadmin"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SectranAdminUpdate is the builder for updating SectranAdmin entities.
type SectranAdminUpdate struct {
	config
	hooks    []Hook
	mutation *SectranAdminMutation
}

// Where appends a list predicates to the SectranAdminUpdate builder.
func (sau *SectranAdminUpdate) Where(ps ...predicate.SectranAdmin) *SectranAdminUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// Mutation returns the SectranAdminMutation object of the builder.
func (sau *SectranAdminUpdate) Mutation() *SectranAdminMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SectranAdminUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SectranAdminUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SectranAdminUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SectranAdminUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sau *SectranAdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sectranadmin.Table, sectranadmin.Columns, sqlgraph.NewFieldSpec(sectranadmin.FieldID, field.TypeInt))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sectranadmin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SectranAdminUpdateOne is the builder for updating a single SectranAdmin entity.
type SectranAdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectranAdminMutation
}

// Mutation returns the SectranAdminMutation object of the builder.
func (sauo *SectranAdminUpdateOne) Mutation() *SectranAdminMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SectranAdminUpdate builder.
func (sauo *SectranAdminUpdateOne) Where(ps ...predicate.SectranAdmin) *SectranAdminUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SectranAdminUpdateOne) Select(field string, fields ...string) *SectranAdminUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SectranAdmin entity.
func (sauo *SectranAdminUpdateOne) Save(ctx context.Context) (*SectranAdmin, error) {
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SectranAdminUpdateOne) SaveX(ctx context.Context) *SectranAdmin {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SectranAdminUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SectranAdminUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sauo *SectranAdminUpdateOne) sqlSave(ctx context.Context) (_node *SectranAdmin, err error) {
	_spec := sqlgraph.NewUpdateSpec(sectranadmin.Table, sectranadmin.Columns, sqlgraph.NewFieldSpec(sectranadmin.FieldID, field.TypeInt))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SectranAdmin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sectranadmin.FieldID)
		for _, f := range fields {
			if !sectranadmin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sectranadmin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SectranAdmin{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sectranadmin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
