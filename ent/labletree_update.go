// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sectran_admin/ent/labletree"
	"sectran_admin/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LableTreeUpdate is the builder for updating LableTree entities.
type LableTreeUpdate struct {
	config
	hooks    []Hook
	mutation *LableTreeMutation
}

// Where appends a list predicates to the LableTreeUpdate builder.
func (ltu *LableTreeUpdate) Where(ps ...predicate.LableTree) *LableTreeUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetUpdatedAt sets the "updated_at" field.
func (ltu *LableTreeUpdate) SetUpdatedAt(t time.Time) *LableTreeUpdate {
	ltu.mutation.SetUpdatedAt(t)
	return ltu
}

// SetName sets the "name" field.
func (ltu *LableTreeUpdate) SetName(s string) *LableTreeUpdate {
	ltu.mutation.SetName(s)
	return ltu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableName(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetName(*s)
	}
	return ltu
}

// SetType sets the "type" field.
func (ltu *LableTreeUpdate) SetType(u uint) *LableTreeUpdate {
	ltu.mutation.ResetType()
	ltu.mutation.SetType(u)
	return ltu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableType(u *uint) *LableTreeUpdate {
	if u != nil {
		ltu.SetType(*u)
	}
	return ltu
}

// AddType adds u to the "type" field.
func (ltu *LableTreeUpdate) AddType(u int) *LableTreeUpdate {
	ltu.mutation.AddType(u)
	return ltu
}

// SetIcon sets the "icon" field.
func (ltu *LableTreeUpdate) SetIcon(s string) *LableTreeUpdate {
	ltu.mutation.SetIcon(s)
	return ltu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableIcon(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetIcon(*s)
	}
	return ltu
}

// SetContent sets the "content" field.
func (ltu *LableTreeUpdate) SetContent(s string) *LableTreeUpdate {
	ltu.mutation.SetContent(s)
	return ltu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableContent(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetContent(*s)
	}
	return ltu
}

// SetParentLable sets the "parent_lable" field.
func (ltu *LableTreeUpdate) SetParentLable(u uint64) *LableTreeUpdate {
	ltu.mutation.ResetParentLable()
	ltu.mutation.SetParentLable(u)
	return ltu
}

// SetNillableParentLable sets the "parent_lable" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableParentLable(u *uint64) *LableTreeUpdate {
	if u != nil {
		ltu.SetParentLable(*u)
	}
	return ltu
}

// AddParentLable adds u to the "parent_lable" field.
func (ltu *LableTreeUpdate) AddParentLable(u int64) *LableTreeUpdate {
	ltu.mutation.AddParentLable(u)
	return ltu
}

// SetLableTargetType sets the "lable_target_type" field.
func (ltu *LableTreeUpdate) SetLableTargetType(u uint16) *LableTreeUpdate {
	ltu.mutation.ResetLableTargetType()
	ltu.mutation.SetLableTargetType(u)
	return ltu
}

// SetNillableLableTargetType sets the "lable_target_type" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableLableTargetType(u *uint16) *LableTreeUpdate {
	if u != nil {
		ltu.SetLableTargetType(*u)
	}
	return ltu
}

// AddLableTargetType adds u to the "lable_target_type" field.
func (ltu *LableTreeUpdate) AddLableTargetType(u int16) *LableTreeUpdate {
	ltu.mutation.AddLableTargetType(u)
	return ltu
}

// SetParentLables sets the "parent_lables" field.
func (ltu *LableTreeUpdate) SetParentLables(s string) *LableTreeUpdate {
	ltu.mutation.SetParentLables(s)
	return ltu
}

// SetNillableParentLables sets the "parent_lables" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableParentLables(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetParentLables(*s)
	}
	return ltu
}

// SetLableOwner sets the "lable_owner" field.
func (ltu *LableTreeUpdate) SetLableOwner(u uint64) *LableTreeUpdate {
	ltu.mutation.ResetLableOwner()
	ltu.mutation.SetLableOwner(u)
	return ltu
}

// SetNillableLableOwner sets the "lable_owner" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableLableOwner(u *uint64) *LableTreeUpdate {
	if u != nil {
		ltu.SetLableOwner(*u)
	}
	return ltu
}

// AddLableOwner adds u to the "lable_owner" field.
func (ltu *LableTreeUpdate) AddLableOwner(u int64) *LableTreeUpdate {
	ltu.mutation.AddLableOwner(u)
	return ltu
}

// SetInherit sets the "inherit" field.
func (ltu *LableTreeUpdate) SetInherit(b bool) *LableTreeUpdate {
	ltu.mutation.SetInherit(b)
	return ltu
}

// SetNillableInherit sets the "inherit" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableInherit(b *bool) *LableTreeUpdate {
	if b != nil {
		ltu.SetInherit(*b)
	}
	return ltu
}

// SetRelatedLables sets the "related_lables" field.
func (ltu *LableTreeUpdate) SetRelatedLables(s string) *LableTreeUpdate {
	ltu.mutation.SetRelatedLables(s)
	return ltu
}

// SetNillableRelatedLables sets the "related_lables" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableRelatedLables(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetRelatedLables(*s)
	}
	return ltu
}

// SetDescription sets the "description" field.
func (ltu *LableTreeUpdate) SetDescription(s string) *LableTreeUpdate {
	ltu.mutation.SetDescription(s)
	return ltu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableDescription(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetDescription(*s)
	}
	return ltu
}

// SetExt1 sets the "ext1" field.
func (ltu *LableTreeUpdate) SetExt1(s string) *LableTreeUpdate {
	ltu.mutation.SetExt1(s)
	return ltu
}

// SetNillableExt1 sets the "ext1" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableExt1(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetExt1(*s)
	}
	return ltu
}

// SetExt2 sets the "ext2" field.
func (ltu *LableTreeUpdate) SetExt2(s string) *LableTreeUpdate {
	ltu.mutation.SetExt2(s)
	return ltu
}

// SetNillableExt2 sets the "ext2" field if the given value is not nil.
func (ltu *LableTreeUpdate) SetNillableExt2(s *string) *LableTreeUpdate {
	if s != nil {
		ltu.SetExt2(*s)
	}
	return ltu
}

// Mutation returns the LableTreeMutation object of the builder.
func (ltu *LableTreeUpdate) Mutation() *LableTreeMutation {
	return ltu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LableTreeUpdate) Save(ctx context.Context) (int, error) {
	ltu.defaults()
	return withHooks(ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LableTreeUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LableTreeUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LableTreeUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltu *LableTreeUpdate) defaults() {
	if _, ok := ltu.mutation.UpdatedAt(); !ok {
		v := labletree.UpdateDefaultUpdatedAt()
		ltu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LableTreeUpdate) check() error {
	if v, ok := ltu.mutation.Name(); ok {
		if err := labletree.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LableTree.name": %w`, err)}
		}
	}
	if v, ok := ltu.mutation.Icon(); ok {
		if err := labletree.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "LableTree.icon": %w`, err)}
		}
	}
	if v, ok := ltu.mutation.Content(); ok {
		if err := labletree.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "LableTree.content": %w`, err)}
		}
	}
	if v, ok := ltu.mutation.Description(); ok {
		if err := labletree.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "LableTree.description": %w`, err)}
		}
	}
	return nil
}

func (ltu *LableTreeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(labletree.Table, labletree.Columns, sqlgraph.NewFieldSpec(labletree.FieldID, field.TypeUint64))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.UpdatedAt(); ok {
		_spec.SetField(labletree.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ltu.mutation.Name(); ok {
		_spec.SetField(labletree.FieldName, field.TypeString, value)
	}
	if value, ok := ltu.mutation.GetType(); ok {
		_spec.SetField(labletree.FieldType, field.TypeUint, value)
	}
	if value, ok := ltu.mutation.AddedType(); ok {
		_spec.AddField(labletree.FieldType, field.TypeUint, value)
	}
	if value, ok := ltu.mutation.Icon(); ok {
		_spec.SetField(labletree.FieldIcon, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Content(); ok {
		_spec.SetField(labletree.FieldContent, field.TypeString, value)
	}
	if value, ok := ltu.mutation.ParentLable(); ok {
		_spec.SetField(labletree.FieldParentLable, field.TypeUint64, value)
	}
	if value, ok := ltu.mutation.AddedParentLable(); ok {
		_spec.AddField(labletree.FieldParentLable, field.TypeUint64, value)
	}
	if value, ok := ltu.mutation.LableTargetType(); ok {
		_spec.SetField(labletree.FieldLableTargetType, field.TypeUint16, value)
	}
	if value, ok := ltu.mutation.AddedLableTargetType(); ok {
		_spec.AddField(labletree.FieldLableTargetType, field.TypeUint16, value)
	}
	if value, ok := ltu.mutation.ParentLables(); ok {
		_spec.SetField(labletree.FieldParentLables, field.TypeString, value)
	}
	if value, ok := ltu.mutation.LableOwner(); ok {
		_spec.SetField(labletree.FieldLableOwner, field.TypeUint64, value)
	}
	if value, ok := ltu.mutation.AddedLableOwner(); ok {
		_spec.AddField(labletree.FieldLableOwner, field.TypeUint64, value)
	}
	if value, ok := ltu.mutation.Inherit(); ok {
		_spec.SetField(labletree.FieldInherit, field.TypeBool, value)
	}
	if value, ok := ltu.mutation.RelatedLables(); ok {
		_spec.SetField(labletree.FieldRelatedLables, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Description(); ok {
		_spec.SetField(labletree.FieldDescription, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Ext1(); ok {
		_spec.SetField(labletree.FieldExt1, field.TypeString, value)
	}
	if value, ok := ltu.mutation.Ext2(); ok {
		_spec.SetField(labletree.FieldExt2, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labletree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LableTreeUpdateOne is the builder for updating a single LableTree entity.
type LableTreeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LableTreeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ltuo *LableTreeUpdateOne) SetUpdatedAt(t time.Time) *LableTreeUpdateOne {
	ltuo.mutation.SetUpdatedAt(t)
	return ltuo
}

// SetName sets the "name" field.
func (ltuo *LableTreeUpdateOne) SetName(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetName(s)
	return ltuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableName(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetName(*s)
	}
	return ltuo
}

// SetType sets the "type" field.
func (ltuo *LableTreeUpdateOne) SetType(u uint) *LableTreeUpdateOne {
	ltuo.mutation.ResetType()
	ltuo.mutation.SetType(u)
	return ltuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableType(u *uint) *LableTreeUpdateOne {
	if u != nil {
		ltuo.SetType(*u)
	}
	return ltuo
}

// AddType adds u to the "type" field.
func (ltuo *LableTreeUpdateOne) AddType(u int) *LableTreeUpdateOne {
	ltuo.mutation.AddType(u)
	return ltuo
}

// SetIcon sets the "icon" field.
func (ltuo *LableTreeUpdateOne) SetIcon(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetIcon(s)
	return ltuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableIcon(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetIcon(*s)
	}
	return ltuo
}

// SetContent sets the "content" field.
func (ltuo *LableTreeUpdateOne) SetContent(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetContent(s)
	return ltuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableContent(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetContent(*s)
	}
	return ltuo
}

// SetParentLable sets the "parent_lable" field.
func (ltuo *LableTreeUpdateOne) SetParentLable(u uint64) *LableTreeUpdateOne {
	ltuo.mutation.ResetParentLable()
	ltuo.mutation.SetParentLable(u)
	return ltuo
}

// SetNillableParentLable sets the "parent_lable" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableParentLable(u *uint64) *LableTreeUpdateOne {
	if u != nil {
		ltuo.SetParentLable(*u)
	}
	return ltuo
}

// AddParentLable adds u to the "parent_lable" field.
func (ltuo *LableTreeUpdateOne) AddParentLable(u int64) *LableTreeUpdateOne {
	ltuo.mutation.AddParentLable(u)
	return ltuo
}

// SetLableTargetType sets the "lable_target_type" field.
func (ltuo *LableTreeUpdateOne) SetLableTargetType(u uint16) *LableTreeUpdateOne {
	ltuo.mutation.ResetLableTargetType()
	ltuo.mutation.SetLableTargetType(u)
	return ltuo
}

// SetNillableLableTargetType sets the "lable_target_type" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableLableTargetType(u *uint16) *LableTreeUpdateOne {
	if u != nil {
		ltuo.SetLableTargetType(*u)
	}
	return ltuo
}

// AddLableTargetType adds u to the "lable_target_type" field.
func (ltuo *LableTreeUpdateOne) AddLableTargetType(u int16) *LableTreeUpdateOne {
	ltuo.mutation.AddLableTargetType(u)
	return ltuo
}

// SetParentLables sets the "parent_lables" field.
func (ltuo *LableTreeUpdateOne) SetParentLables(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetParentLables(s)
	return ltuo
}

// SetNillableParentLables sets the "parent_lables" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableParentLables(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetParentLables(*s)
	}
	return ltuo
}

// SetLableOwner sets the "lable_owner" field.
func (ltuo *LableTreeUpdateOne) SetLableOwner(u uint64) *LableTreeUpdateOne {
	ltuo.mutation.ResetLableOwner()
	ltuo.mutation.SetLableOwner(u)
	return ltuo
}

// SetNillableLableOwner sets the "lable_owner" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableLableOwner(u *uint64) *LableTreeUpdateOne {
	if u != nil {
		ltuo.SetLableOwner(*u)
	}
	return ltuo
}

// AddLableOwner adds u to the "lable_owner" field.
func (ltuo *LableTreeUpdateOne) AddLableOwner(u int64) *LableTreeUpdateOne {
	ltuo.mutation.AddLableOwner(u)
	return ltuo
}

// SetInherit sets the "inherit" field.
func (ltuo *LableTreeUpdateOne) SetInherit(b bool) *LableTreeUpdateOne {
	ltuo.mutation.SetInherit(b)
	return ltuo
}

// SetNillableInherit sets the "inherit" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableInherit(b *bool) *LableTreeUpdateOne {
	if b != nil {
		ltuo.SetInherit(*b)
	}
	return ltuo
}

// SetRelatedLables sets the "related_lables" field.
func (ltuo *LableTreeUpdateOne) SetRelatedLables(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetRelatedLables(s)
	return ltuo
}

// SetNillableRelatedLables sets the "related_lables" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableRelatedLables(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetRelatedLables(*s)
	}
	return ltuo
}

// SetDescription sets the "description" field.
func (ltuo *LableTreeUpdateOne) SetDescription(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetDescription(s)
	return ltuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableDescription(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetDescription(*s)
	}
	return ltuo
}

// SetExt1 sets the "ext1" field.
func (ltuo *LableTreeUpdateOne) SetExt1(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetExt1(s)
	return ltuo
}

// SetNillableExt1 sets the "ext1" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableExt1(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetExt1(*s)
	}
	return ltuo
}

// SetExt2 sets the "ext2" field.
func (ltuo *LableTreeUpdateOne) SetExt2(s string) *LableTreeUpdateOne {
	ltuo.mutation.SetExt2(s)
	return ltuo
}

// SetNillableExt2 sets the "ext2" field if the given value is not nil.
func (ltuo *LableTreeUpdateOne) SetNillableExt2(s *string) *LableTreeUpdateOne {
	if s != nil {
		ltuo.SetExt2(*s)
	}
	return ltuo
}

// Mutation returns the LableTreeMutation object of the builder.
func (ltuo *LableTreeUpdateOne) Mutation() *LableTreeMutation {
	return ltuo.mutation
}

// Where appends a list predicates to the LableTreeUpdate builder.
func (ltuo *LableTreeUpdateOne) Where(ps ...predicate.LableTree) *LableTreeUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LableTreeUpdateOne) Select(field string, fields ...string) *LableTreeUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LableTree entity.
func (ltuo *LableTreeUpdateOne) Save(ctx context.Context) (*LableTree, error) {
	ltuo.defaults()
	return withHooks(ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LableTreeUpdateOne) SaveX(ctx context.Context) *LableTree {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LableTreeUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LableTreeUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltuo *LableTreeUpdateOne) defaults() {
	if _, ok := ltuo.mutation.UpdatedAt(); !ok {
		v := labletree.UpdateDefaultUpdatedAt()
		ltuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LableTreeUpdateOne) check() error {
	if v, ok := ltuo.mutation.Name(); ok {
		if err := labletree.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LableTree.name": %w`, err)}
		}
	}
	if v, ok := ltuo.mutation.Icon(); ok {
		if err := labletree.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "LableTree.icon": %w`, err)}
		}
	}
	if v, ok := ltuo.mutation.Content(); ok {
		if err := labletree.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "LableTree.content": %w`, err)}
		}
	}
	if v, ok := ltuo.mutation.Description(); ok {
		if err := labletree.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "LableTree.description": %w`, err)}
		}
	}
	return nil
}

func (ltuo *LableTreeUpdateOne) sqlSave(ctx context.Context) (_node *LableTree, err error) {
	if err := ltuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(labletree.Table, labletree.Columns, sqlgraph.NewFieldSpec(labletree.FieldID, field.TypeUint64))
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LableTree.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, labletree.FieldID)
		for _, f := range fields {
			if !labletree.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != labletree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.UpdatedAt(); ok {
		_spec.SetField(labletree.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ltuo.mutation.Name(); ok {
		_spec.SetField(labletree.FieldName, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.GetType(); ok {
		_spec.SetField(labletree.FieldType, field.TypeUint, value)
	}
	if value, ok := ltuo.mutation.AddedType(); ok {
		_spec.AddField(labletree.FieldType, field.TypeUint, value)
	}
	if value, ok := ltuo.mutation.Icon(); ok {
		_spec.SetField(labletree.FieldIcon, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Content(); ok {
		_spec.SetField(labletree.FieldContent, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.ParentLable(); ok {
		_spec.SetField(labletree.FieldParentLable, field.TypeUint64, value)
	}
	if value, ok := ltuo.mutation.AddedParentLable(); ok {
		_spec.AddField(labletree.FieldParentLable, field.TypeUint64, value)
	}
	if value, ok := ltuo.mutation.LableTargetType(); ok {
		_spec.SetField(labletree.FieldLableTargetType, field.TypeUint16, value)
	}
	if value, ok := ltuo.mutation.AddedLableTargetType(); ok {
		_spec.AddField(labletree.FieldLableTargetType, field.TypeUint16, value)
	}
	if value, ok := ltuo.mutation.ParentLables(); ok {
		_spec.SetField(labletree.FieldParentLables, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.LableOwner(); ok {
		_spec.SetField(labletree.FieldLableOwner, field.TypeUint64, value)
	}
	if value, ok := ltuo.mutation.AddedLableOwner(); ok {
		_spec.AddField(labletree.FieldLableOwner, field.TypeUint64, value)
	}
	if value, ok := ltuo.mutation.Inherit(); ok {
		_spec.SetField(labletree.FieldInherit, field.TypeBool, value)
	}
	if value, ok := ltuo.mutation.RelatedLables(); ok {
		_spec.SetField(labletree.FieldRelatedLables, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Description(); ok {
		_spec.SetField(labletree.FieldDescription, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Ext1(); ok {
		_spec.SetField(labletree.FieldExt1, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.Ext2(); ok {
		_spec.SetField(labletree.FieldExt2, field.TypeString, value)
	}
	_node = &LableTree{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labletree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
