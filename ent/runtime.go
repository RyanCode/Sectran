// +build tools
// +build tools
// +build tools
// +build tools
// +build tools
// +build tools
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"sectran_admin/ent/account"
	"sectran_admin/ent/department"
	"sectran_admin/ent/device"
	"sectran_admin/ent/labletree"
	"sectran_admin/ent/role"
	"sectran_admin/ent/schema"
	"sectran_admin/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescCreatedAt is the schema descriptor for created_at field.
	accountDescCreatedAt := accountMixinFields0[1].Descriptor()
	// account.DefaultCreatedAt holds the default value on creation for the created_at field.
	account.DefaultCreatedAt = accountDescCreatedAt.Default.(func() time.Time)
	// accountDescUpdatedAt is the schema descriptor for updated_at field.
	accountDescUpdatedAt := accountMixinFields0[2].Descriptor()
	// account.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	account.DefaultUpdatedAt = accountDescUpdatedAt.Default.(func() time.Time)
	// account.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	account.UpdateDefaultUpdatedAt = accountDescUpdatedAt.UpdateDefault.(func() time.Time)
	// accountDescUsername is the schema descriptor for username field.
	accountDescUsername := accountFields[0].Descriptor()
	// account.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	account.UsernameValidator = func() func(string) error {
		validators := accountDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescPort is the schema descriptor for port field.
	accountDescPort := accountFields[1].Descriptor()
	// account.PortValidator is a validator for the "port" field. It is called by the builders before save.
	account.PortValidator = func() func(uint32) error {
		validators := accountDescPort.Validators
		fns := [...]func(uint32) error{
			validators[0].(func(uint32) error),
			validators[1].(func(uint32) error),
		}
		return func(port uint32) error {
			for _, fn := range fns {
				if err := fn(port); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescProtocol is the schema descriptor for protocol field.
	accountDescProtocol := accountFields[2].Descriptor()
	// account.ProtocolValidator is a validator for the "protocol" field. It is called by the builders before save.
	account.ProtocolValidator = func() func(uint8) error {
		validators := accountDescProtocol.Validators
		fns := [...]func(uint8) error{
			validators[0].(func(uint8) error),
			validators[1].(func(uint8) error),
		}
		return func(protocol uint8) error {
			for _, fn := range fns {
				if err := fn(protocol); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescPassword is the schema descriptor for password field.
	accountDescPassword := accountFields[3].Descriptor()
	// account.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	account.PasswordValidator = accountDescPassword.Validators[0].(func(string) error)
	// accountDescPrivateKey is the schema descriptor for private_key field.
	accountDescPrivateKey := accountFields[4].Descriptor()
	// account.PrivateKeyValidator is a validator for the "private_key" field. It is called by the builders before save.
	account.PrivateKeyValidator = accountDescPrivateKey.Validators[0].(func(string) error)
	// accountDescDeviceID is the schema descriptor for device_id field.
	accountDescDeviceID := accountFields[5].Descriptor()
	// account.DeviceIDValidator is a validator for the "device_id" field. It is called by the builders before save.
	account.DeviceIDValidator = accountDescDeviceID.Validators[0].(func(uint64) error)
	departmentMixin := schema.Department{}.Mixin()
	departmentMixinFields0 := departmentMixin[0].Fields()
	_ = departmentMixinFields0
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescCreatedAt is the schema descriptor for created_at field.
	departmentDescCreatedAt := departmentMixinFields0[1].Descriptor()
	// department.DefaultCreatedAt holds the default value on creation for the created_at field.
	department.DefaultCreatedAt = departmentDescCreatedAt.Default.(func() time.Time)
	// departmentDescUpdatedAt is the schema descriptor for updated_at field.
	departmentDescUpdatedAt := departmentMixinFields0[2].Descriptor()
	// department.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	department.DefaultUpdatedAt = departmentDescUpdatedAt.Default.(func() time.Time)
	// department.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	department.UpdateDefaultUpdatedAt = departmentDescUpdatedAt.UpdateDefault.(func() time.Time)
	// departmentDescName is the schema descriptor for name field.
	departmentDescName := departmentFields[0].Descriptor()
	// department.NameValidator is a validator for the "name" field. It is called by the builders before save.
	department.NameValidator = func() func(string) error {
		validators := departmentDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// departmentDescArea is the schema descriptor for area field.
	departmentDescArea := departmentFields[1].Descriptor()
	// department.AreaValidator is a validator for the "area" field. It is called by the builders before save.
	department.AreaValidator = func() func(string) error {
		validators := departmentDescArea.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(area string) error {
			for _, fn := range fns {
				if err := fn(area); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// departmentDescDescription is the schema descriptor for description field.
	departmentDescDescription := departmentFields[2].Descriptor()
	// department.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	department.DescriptionValidator = departmentDescDescription.Validators[0].(func(string) error)
	// departmentDescParentDepartmentID is the schema descriptor for parent_department_id field.
	departmentDescParentDepartmentID := departmentFields[3].Descriptor()
	// department.ParentDepartmentIDValidator is a validator for the "parent_department_id" field. It is called by the builders before save.
	department.ParentDepartmentIDValidator = departmentDescParentDepartmentID.Validators[0].(func(uint64) error)
	deviceMixin := schema.Device{}.Mixin()
	deviceMixinFields0 := deviceMixin[0].Fields()
	_ = deviceMixinFields0
	deviceFields := schema.Device{}.Fields()
	_ = deviceFields
	// deviceDescCreatedAt is the schema descriptor for created_at field.
	deviceDescCreatedAt := deviceMixinFields0[1].Descriptor()
	// device.DefaultCreatedAt holds the default value on creation for the created_at field.
	device.DefaultCreatedAt = deviceDescCreatedAt.Default.(func() time.Time)
	// deviceDescUpdatedAt is the schema descriptor for updated_at field.
	deviceDescUpdatedAt := deviceMixinFields0[2].Descriptor()
	// device.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	device.DefaultUpdatedAt = deviceDescUpdatedAt.Default.(func() time.Time)
	// device.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	device.UpdateDefaultUpdatedAt = deviceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// deviceDescName is the schema descriptor for name field.
	deviceDescName := deviceFields[0].Descriptor()
	// device.NameValidator is a validator for the "name" field. It is called by the builders before save.
	device.NameValidator = func() func(string) error {
		validators := deviceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// deviceDescDepartmentID is the schema descriptor for department_id field.
	deviceDescDepartmentID := deviceFields[1].Descriptor()
	// device.DepartmentIDValidator is a validator for the "department_id" field. It is called by the builders before save.
	device.DepartmentIDValidator = deviceDescDepartmentID.Validators[0].(func(uint64) error)
	// deviceDescHost is the schema descriptor for host field.
	deviceDescHost := deviceFields[2].Descriptor()
	// device.HostValidator is a validator for the "host" field. It is called by the builders before save.
	device.HostValidator = func() func(string) error {
		validators := deviceDescHost.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(host string) error {
			for _, fn := range fns {
				if err := fn(host); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// deviceDescType is the schema descriptor for type field.
	deviceDescType := deviceFields[3].Descriptor()
	// device.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	device.TypeValidator = func() func(string) error {
		validators := deviceDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// deviceDescDescription is the schema descriptor for description field.
	deviceDescDescription := deviceFields[4].Descriptor()
	// device.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	device.DescriptionValidator = deviceDescDescription.Validators[0].(func(string) error)
	labletreeMixin := schema.LableTree{}.Mixin()
	labletreeMixinFields0 := labletreeMixin[0].Fields()
	_ = labletreeMixinFields0
	labletreeFields := schema.LableTree{}.Fields()
	_ = labletreeFields
	// labletreeDescCreatedAt is the schema descriptor for created_at field.
	labletreeDescCreatedAt := labletreeMixinFields0[1].Descriptor()
	// labletree.DefaultCreatedAt holds the default value on creation for the created_at field.
	labletree.DefaultCreatedAt = labletreeDescCreatedAt.Default.(func() time.Time)
	// labletreeDescUpdatedAt is the schema descriptor for updated_at field.
	labletreeDescUpdatedAt := labletreeMixinFields0[2].Descriptor()
	// labletree.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	labletree.DefaultUpdatedAt = labletreeDescUpdatedAt.Default.(func() time.Time)
	// labletree.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	labletree.UpdateDefaultUpdatedAt = labletreeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// labletreeDescName is the schema descriptor for name field.
	labletreeDescName := labletreeFields[0].Descriptor()
	// labletree.NameValidator is a validator for the "name" field. It is called by the builders before save.
	labletree.NameValidator = func() func(string) error {
		validators := labletreeDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// labletreeDescIcon is the schema descriptor for icon field.
	labletreeDescIcon := labletreeFields[2].Descriptor()
	// labletree.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	labletree.IconValidator = labletreeDescIcon.Validators[0].(func(string) error)
	// labletreeDescContent is the schema descriptor for content field.
	labletreeDescContent := labletreeFields[3].Descriptor()
	// labletree.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	labletree.ContentValidator = labletreeDescContent.Validators[0].(func(string) error)
	// labletreeDescDescription is the schema descriptor for description field.
	labletreeDescDescription := labletreeFields[7].Descriptor()
	// labletree.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	labletree.DescriptionValidator = labletreeDescDescription.Validators[0].(func(string) error)
	roleMixin := schema.Role{}.Mixin()
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields0[1].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleMixinFields0[2].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescWeight is the schema descriptor for weight field.
	roleDescWeight := roleFields[1].Descriptor()
	// role.WeightValidator is a validator for the "weight" field. It is called by the builders before save.
	role.WeightValidator = roleDescWeight.Validators[0].(func(int) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescAccount is the schema descriptor for account field.
	userDescAccount := userFields[0].Descriptor()
	// user.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	user.AccountValidator = func() func(string) error {
		validators := userDescAccount.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(account string) error {
			for _, fn := range fns {
				if err := fn(account); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescDepartmentID is the schema descriptor for department_id field.
	userDescDepartmentID := userFields[3].Descriptor()
	// user.DepartmentIDValidator is a validator for the "department_id" field. It is called by the builders before save.
	user.DepartmentIDValidator = userDescDepartmentID.Validators[0].(func(uint64) error)
	// userDescRoleID is the schema descriptor for role_id field.
	userDescRoleID := userFields[4].Descriptor()
	// user.RoleIDValidator is a validator for the "role_id" field. It is called by the builders before save.
	user.RoleIDValidator = userDescRoleID.Validators[0].(func(uint64) error)
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userFields[5].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(bool)
	// userDescDescription is the schema descriptor for description field.
	userDescDescription := userFields[6].Descriptor()
	// user.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	user.DescriptionValidator = userDescDescription.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[7].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userFields[8].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = userDescPhoneNumber.Validators[0].(func(string) error)
}
