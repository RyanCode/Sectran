// Code generated by ent, DO NOT EDIT.

package labletree

import (
	"sectran_admin/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldType, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldIcon, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldContent, v))
}

// Ownership applies equality check predicate on the "ownership" field. It's identical to OwnershipEQ.
func Ownership(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldOwnership, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldOwnerID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldDescription, v))
}

// TargetType applies equality check predicate on the "target_type" field. It's identical to TargetTypeEQ.
func TargetType(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldTargetType, v))
}

// Parents applies equality check predicate on the "parents" field. It's identical to ParentsEQ.
func Parents(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParents, v))
}

// Inherit applies equality check predicate on the "inherit" field. It's identical to InheritEQ.
func Inherit(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldInherit, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldType, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldIcon, v))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldIcon, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldContent, v))
}

// OwnershipEQ applies the EQ predicate on the "ownership" field.
func OwnershipEQ(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldOwnership, v))
}

// OwnershipNEQ applies the NEQ predicate on the "ownership" field.
func OwnershipNEQ(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldOwnership, v))
}

// OwnershipIn applies the In predicate on the "ownership" field.
func OwnershipIn(vs ...uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldOwnership, vs...))
}

// OwnershipNotIn applies the NotIn predicate on the "ownership" field.
func OwnershipNotIn(vs ...uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldOwnership, vs...))
}

// OwnershipGT applies the GT predicate on the "ownership" field.
func OwnershipGT(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldOwnership, v))
}

// OwnershipGTE applies the GTE predicate on the "ownership" field.
func OwnershipGTE(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldOwnership, v))
}

// OwnershipLT applies the LT predicate on the "ownership" field.
func OwnershipLT(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldOwnership, v))
}

// OwnershipLTE applies the LTE predicate on the "ownership" field.
func OwnershipLTE(v uint8) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldOwnership, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldOwnerID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldParentID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldDescription, v))
}

// TargetTypeEQ applies the EQ predicate on the "target_type" field.
func TargetTypeEQ(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldTargetType, v))
}

// TargetTypeNEQ applies the NEQ predicate on the "target_type" field.
func TargetTypeNEQ(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldTargetType, v))
}

// TargetTypeIn applies the In predicate on the "target_type" field.
func TargetTypeIn(vs ...uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldTargetType, vs...))
}

// TargetTypeNotIn applies the NotIn predicate on the "target_type" field.
func TargetTypeNotIn(vs ...uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldTargetType, vs...))
}

// TargetTypeGT applies the GT predicate on the "target_type" field.
func TargetTypeGT(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldTargetType, v))
}

// TargetTypeGTE applies the GTE predicate on the "target_type" field.
func TargetTypeGTE(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldTargetType, v))
}

// TargetTypeLT applies the LT predicate on the "target_type" field.
func TargetTypeLT(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldTargetType, v))
}

// TargetTypeLTE applies the LTE predicate on the "target_type" field.
func TargetTypeLTE(v uint16) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldTargetType, v))
}

// ParentsEQ applies the EQ predicate on the "parents" field.
func ParentsEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParents, v))
}

// ParentsNEQ applies the NEQ predicate on the "parents" field.
func ParentsNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldParents, v))
}

// ParentsIn applies the In predicate on the "parents" field.
func ParentsIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldParents, vs...))
}

// ParentsNotIn applies the NotIn predicate on the "parents" field.
func ParentsNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldParents, vs...))
}

// ParentsGT applies the GT predicate on the "parents" field.
func ParentsGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldParents, v))
}

// ParentsGTE applies the GTE predicate on the "parents" field.
func ParentsGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldParents, v))
}

// ParentsLT applies the LT predicate on the "parents" field.
func ParentsLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldParents, v))
}

// ParentsLTE applies the LTE predicate on the "parents" field.
func ParentsLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldParents, v))
}

// ParentsContains applies the Contains predicate on the "parents" field.
func ParentsContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldParents, v))
}

// ParentsHasPrefix applies the HasPrefix predicate on the "parents" field.
func ParentsHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldParents, v))
}

// ParentsHasSuffix applies the HasSuffix predicate on the "parents" field.
func ParentsHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldParents, v))
}

// ParentsEqualFold applies the EqualFold predicate on the "parents" field.
func ParentsEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldParents, v))
}

// ParentsContainsFold applies the ContainsFold predicate on the "parents" field.
func ParentsContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldParents, v))
}

// InheritEQ applies the EQ predicate on the "inherit" field.
func InheritEQ(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldInherit, v))
}

// InheritNEQ applies the NEQ predicate on the "inherit" field.
func InheritNEQ(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldInherit, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.NotPredicates(p))
}
