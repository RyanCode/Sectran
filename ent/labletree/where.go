// Code generated by ent, DO NOT EDIT.

package labletree

import (
	"sectran_admin/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldType, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldIcon, v))
}

// ParentLable applies equality check predicate on the "parent_lable" field. It's identical to ParentLableEQ.
func ParentLable(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentLable, v))
}

// ParentLables applies equality check predicate on the "parent_lables" field. It's identical to ParentLablesEQ.
func ParentLables(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentLables, v))
}

// LableOwner applies equality check predicate on the "lable_owner" field. It's identical to LableOwnerEQ.
func LableOwner(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldLableOwner, v))
}

// Inherit applies equality check predicate on the "inherit" field. It's identical to InheritEQ.
func Inherit(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldInherit, v))
}

// RelatedLabels applies equality check predicate on the "related_labels" field. It's identical to RelatedLabelsEQ.
func RelatedLabels(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldRelatedLabels, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldType, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldIcon, v))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldIcon, v))
}

// ParentLableEQ applies the EQ predicate on the "parent_lable" field.
func ParentLableEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentLable, v))
}

// ParentLableNEQ applies the NEQ predicate on the "parent_lable" field.
func ParentLableNEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldParentLable, v))
}

// ParentLableIn applies the In predicate on the "parent_lable" field.
func ParentLableIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldParentLable, vs...))
}

// ParentLableNotIn applies the NotIn predicate on the "parent_lable" field.
func ParentLableNotIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldParentLable, vs...))
}

// ParentLableGT applies the GT predicate on the "parent_lable" field.
func ParentLableGT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldParentLable, v))
}

// ParentLableGTE applies the GTE predicate on the "parent_lable" field.
func ParentLableGTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldParentLable, v))
}

// ParentLableLT applies the LT predicate on the "parent_lable" field.
func ParentLableLT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldParentLable, v))
}

// ParentLableLTE applies the LTE predicate on the "parent_lable" field.
func ParentLableLTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldParentLable, v))
}

// ParentLablesEQ applies the EQ predicate on the "parent_lables" field.
func ParentLablesEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldParentLables, v))
}

// ParentLablesNEQ applies the NEQ predicate on the "parent_lables" field.
func ParentLablesNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldParentLables, v))
}

// ParentLablesIn applies the In predicate on the "parent_lables" field.
func ParentLablesIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldParentLables, vs...))
}

// ParentLablesNotIn applies the NotIn predicate on the "parent_lables" field.
func ParentLablesNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldParentLables, vs...))
}

// ParentLablesGT applies the GT predicate on the "parent_lables" field.
func ParentLablesGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldParentLables, v))
}

// ParentLablesGTE applies the GTE predicate on the "parent_lables" field.
func ParentLablesGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldParentLables, v))
}

// ParentLablesLT applies the LT predicate on the "parent_lables" field.
func ParentLablesLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldParentLables, v))
}

// ParentLablesLTE applies the LTE predicate on the "parent_lables" field.
func ParentLablesLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldParentLables, v))
}

// ParentLablesContains applies the Contains predicate on the "parent_lables" field.
func ParentLablesContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldParentLables, v))
}

// ParentLablesHasPrefix applies the HasPrefix predicate on the "parent_lables" field.
func ParentLablesHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldParentLables, v))
}

// ParentLablesHasSuffix applies the HasSuffix predicate on the "parent_lables" field.
func ParentLablesHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldParentLables, v))
}

// ParentLablesEqualFold applies the EqualFold predicate on the "parent_lables" field.
func ParentLablesEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldParentLables, v))
}

// ParentLablesContainsFold applies the ContainsFold predicate on the "parent_lables" field.
func ParentLablesContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldParentLables, v))
}

// LableOwnerEQ applies the EQ predicate on the "lable_owner" field.
func LableOwnerEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldLableOwner, v))
}

// LableOwnerNEQ applies the NEQ predicate on the "lable_owner" field.
func LableOwnerNEQ(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldLableOwner, v))
}

// LableOwnerIn applies the In predicate on the "lable_owner" field.
func LableOwnerIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldLableOwner, vs...))
}

// LableOwnerNotIn applies the NotIn predicate on the "lable_owner" field.
func LableOwnerNotIn(vs ...uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldLableOwner, vs...))
}

// LableOwnerGT applies the GT predicate on the "lable_owner" field.
func LableOwnerGT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldLableOwner, v))
}

// LableOwnerGTE applies the GTE predicate on the "lable_owner" field.
func LableOwnerGTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldLableOwner, v))
}

// LableOwnerLT applies the LT predicate on the "lable_owner" field.
func LableOwnerLT(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldLableOwner, v))
}

// LableOwnerLTE applies the LTE predicate on the "lable_owner" field.
func LableOwnerLTE(v uint64) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldLableOwner, v))
}

// InheritEQ applies the EQ predicate on the "inherit" field.
func InheritEQ(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldInherit, v))
}

// InheritNEQ applies the NEQ predicate on the "inherit" field.
func InheritNEQ(v bool) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldInherit, v))
}

// RelatedLabelsEQ applies the EQ predicate on the "related_labels" field.
func RelatedLabelsEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldRelatedLabels, v))
}

// RelatedLabelsNEQ applies the NEQ predicate on the "related_labels" field.
func RelatedLabelsNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldRelatedLabels, v))
}

// RelatedLabelsIn applies the In predicate on the "related_labels" field.
func RelatedLabelsIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldRelatedLabels, vs...))
}

// RelatedLabelsNotIn applies the NotIn predicate on the "related_labels" field.
func RelatedLabelsNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldRelatedLabels, vs...))
}

// RelatedLabelsGT applies the GT predicate on the "related_labels" field.
func RelatedLabelsGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldRelatedLabels, v))
}

// RelatedLabelsGTE applies the GTE predicate on the "related_labels" field.
func RelatedLabelsGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldRelatedLabels, v))
}

// RelatedLabelsLT applies the LT predicate on the "related_labels" field.
func RelatedLabelsLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldRelatedLabels, v))
}

// RelatedLabelsLTE applies the LTE predicate on the "related_labels" field.
func RelatedLabelsLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldRelatedLabels, v))
}

// RelatedLabelsContains applies the Contains predicate on the "related_labels" field.
func RelatedLabelsContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldRelatedLabels, v))
}

// RelatedLabelsHasPrefix applies the HasPrefix predicate on the "related_labels" field.
func RelatedLabelsHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldRelatedLabels, v))
}

// RelatedLabelsHasSuffix applies the HasSuffix predicate on the "related_labels" field.
func RelatedLabelsHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldRelatedLabels, v))
}

// RelatedLabelsEqualFold applies the EqualFold predicate on the "related_labels" field.
func RelatedLabelsEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldRelatedLabels, v))
}

// RelatedLabelsContainsFold applies the ContainsFold predicate on the "related_labels" field.
func RelatedLabelsContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldRelatedLabels, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.LableTree {
	return predicate.LableTree(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.LableTree {
	return predicate.LableTree(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LableTree) predicate.LableTree {
	return predicate.LableTree(sql.NotPredicates(p))
}
