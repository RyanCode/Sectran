// Code generated by ent, DO NOT EDIT.

package labletree

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the labletree type in the database.
	Label = "lable_tree"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldParentLable holds the string denoting the parent_lable field in the database.
	FieldParentLable = "parent_lable"
	// FieldParentLables holds the string denoting the parent_lables field in the database.
	FieldParentLables = "parent_lables"
	// FieldLableOwner holds the string denoting the lable_owner field in the database.
	FieldLableOwner = "lable_owner"
	// FieldInherit holds the string denoting the inherit field in the database.
	FieldInherit = "inherit"
	// FieldRelatedLabels holds the string denoting the related_labels field in the database.
	FieldRelatedLabels = "related_labels"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the labletree in the database.
	Table = "lable_trees"
)

// Columns holds all SQL columns for labletree fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldType,
	FieldIcon,
	FieldParentLable,
	FieldParentLables,
	FieldLableOwner,
	FieldInherit,
	FieldRelatedLabels,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
)

// OrderOption defines the ordering options for the LableTree queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByParentLable orders the results by the parent_lable field.
func ByParentLable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentLable, opts...).ToFunc()
}

// ByParentLables orders the results by the parent_lables field.
func ByParentLables(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentLables, opts...).ToFunc()
}

// ByLableOwner orders the results by the lable_owner field.
func ByLableOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLableOwner, opts...).ToFunc()
}

// ByInherit orders the results by the inherit field.
func ByInherit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInherit, opts...).ToFunc()
}

// ByRelatedLabels orders the results by the related_labels field.
func ByRelatedLabels(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelatedLabels, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}
