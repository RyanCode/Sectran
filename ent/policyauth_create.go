// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sectran_admin/ent/policyauth"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PolicyAuthCreate is the builder for creating a PolicyAuth entity.
type PolicyAuthCreate struct {
	config
	mutation *PolicyAuthMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pac *PolicyAuthCreate) SetCreatedAt(t time.Time) *PolicyAuthCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PolicyAuthCreate) SetNillableCreatedAt(t *time.Time) *PolicyAuthCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PolicyAuthCreate) SetUpdatedAt(t time.Time) *PolicyAuthCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PolicyAuthCreate) SetNillableUpdatedAt(t *time.Time) *PolicyAuthCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetName sets the "name" field.
func (pac *PolicyAuthCreate) SetName(s string) *PolicyAuthCreate {
	pac.mutation.SetName(s)
	return pac
}

// SetPower sets the "power" field.
func (pac *PolicyAuthCreate) SetPower(i int32) *PolicyAuthCreate {
	pac.mutation.SetPower(i)
	return pac
}

// SetDepartmentID sets the "department_id" field.
func (pac *PolicyAuthCreate) SetDepartmentID(u uint64) *PolicyAuthCreate {
	pac.mutation.SetDepartmentID(u)
	return pac
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (pac *PolicyAuthCreate) SetNillableDepartmentID(u *uint64) *PolicyAuthCreate {
	if u != nil {
		pac.SetDepartmentID(*u)
	}
	return pac
}

// SetUsers sets the "users" field.
func (pac *PolicyAuthCreate) SetUsers(s string) *PolicyAuthCreate {
	pac.mutation.SetUsers(s)
	return pac
}

// SetAccounts sets the "accounts" field.
func (pac *PolicyAuthCreate) SetAccounts(s string) *PolicyAuthCreate {
	pac.mutation.SetAccounts(s)
	return pac
}

// SetDirection sets the "direction" field.
func (pac *PolicyAuthCreate) SetDirection(b bool) *PolicyAuthCreate {
	pac.mutation.SetDirection(b)
	return pac
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (pac *PolicyAuthCreate) SetNillableDirection(b *bool) *PolicyAuthCreate {
	if b != nil {
		pac.SetDirection(*b)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PolicyAuthCreate) SetID(u uint64) *PolicyAuthCreate {
	pac.mutation.SetID(u)
	return pac
}

// Mutation returns the PolicyAuthMutation object of the builder.
func (pac *PolicyAuthCreate) Mutation() *PolicyAuthMutation {
	return pac.mutation
}

// Save creates the PolicyAuth in the database.
func (pac *PolicyAuthCreate) Save(ctx context.Context) (*PolicyAuth, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PolicyAuthCreate) SaveX(ctx context.Context) *PolicyAuth {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PolicyAuthCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PolicyAuthCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PolicyAuthCreate) defaults() {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := policyauth.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := policyauth.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.Direction(); !ok {
		v := policyauth.DefaultDirection
		pac.mutation.SetDirection(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PolicyAuthCreate) check() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PolicyAuth.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PolicyAuth.updated_at"`)}
	}
	if _, ok := pac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PolicyAuth.name"`)}
	}
	if v, ok := pac.mutation.Name(); ok {
		if err := policyauth.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PolicyAuth.name": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New(`ent: missing required field "PolicyAuth.power"`)}
	}
	if v, ok := pac.mutation.Power(); ok {
		if err := policyauth.PowerValidator(v); err != nil {
			return &ValidationError{Name: "power", err: fmt.Errorf(`ent: validator failed for field "PolicyAuth.power": %w`, err)}
		}
	}
	if v, ok := pac.mutation.DepartmentID(); ok {
		if err := policyauth.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`ent: validator failed for field "PolicyAuth.department_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Users(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required field "PolicyAuth.users"`)}
	}
	if v, ok := pac.mutation.Users(); ok {
		if err := policyauth.UsersValidator(v); err != nil {
			return &ValidationError{Name: "users", err: fmt.Errorf(`ent: validator failed for field "PolicyAuth.users": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Accounts(); !ok {
		return &ValidationError{Name: "accounts", err: errors.New(`ent: missing required field "PolicyAuth.accounts"`)}
	}
	if v, ok := pac.mutation.Accounts(); ok {
		if err := policyauth.AccountsValidator(v); err != nil {
			return &ValidationError{Name: "accounts", err: fmt.Errorf(`ent: validator failed for field "PolicyAuth.accounts": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required field "PolicyAuth.direction"`)}
	}
	return nil
}

func (pac *PolicyAuthCreate) sqlSave(ctx context.Context) (*PolicyAuth, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PolicyAuthCreate) createSpec() (*PolicyAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &PolicyAuth{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(policyauth.Table, sqlgraph.NewFieldSpec(policyauth.FieldID, field.TypeUint64))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(policyauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(policyauth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.Name(); ok {
		_spec.SetField(policyauth.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pac.mutation.Power(); ok {
		_spec.SetField(policyauth.FieldPower, field.TypeInt32, value)
		_node.Power = value
	}
	if value, ok := pac.mutation.DepartmentID(); ok {
		_spec.SetField(policyauth.FieldDepartmentID, field.TypeUint64, value)
		_node.DepartmentID = value
	}
	if value, ok := pac.mutation.Users(); ok {
		_spec.SetField(policyauth.FieldUsers, field.TypeString, value)
		_node.Users = value
	}
	if value, ok := pac.mutation.Accounts(); ok {
		_spec.SetField(policyauth.FieldAccounts, field.TypeString, value)
		_node.Accounts = value
	}
	if value, ok := pac.mutation.Direction(); ok {
		_spec.SetField(policyauth.FieldDirection, field.TypeBool, value)
		_node.Direction = value
	}
	return _node, _spec
}

// PolicyAuthCreateBulk is the builder for creating many PolicyAuth entities in bulk.
type PolicyAuthCreateBulk struct {
	config
	err      error
	builders []*PolicyAuthCreate
}

// Save creates the PolicyAuth entities in the database.
func (pacb *PolicyAuthCreateBulk) Save(ctx context.Context) ([]*PolicyAuth, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PolicyAuth, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PolicyAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PolicyAuthCreateBulk) SaveX(ctx context.Context) []*PolicyAuth {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PolicyAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PolicyAuthCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
