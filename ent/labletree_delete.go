// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sectran_admin/ent/labletree"
	"sectran_admin/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LableTreeDelete is the builder for deleting a LableTree entity.
type LableTreeDelete struct {
	config
	hooks    []Hook
	mutation *LableTreeMutation
}

// Where appends a list predicates to the LableTreeDelete builder.
func (ltd *LableTreeDelete) Where(ps ...predicate.LableTree) *LableTreeDelete {
	ltd.mutation.Where(ps...)
	return ltd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ltd *LableTreeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ltd.sqlExec, ltd.mutation, ltd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ltd *LableTreeDelete) ExecX(ctx context.Context) int {
	n, err := ltd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ltd *LableTreeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(labletree.Table, sqlgraph.NewFieldSpec(labletree.FieldID, field.TypeUint64))
	if ps := ltd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ltd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ltd.mutation.done = true
	return affected, err
}

// LableTreeDeleteOne is the builder for deleting a single LableTree entity.
type LableTreeDeleteOne struct {
	ltd *LableTreeDelete
}

// Where appends a list predicates to the LableTreeDelete builder.
func (ltdo *LableTreeDeleteOne) Where(ps ...predicate.LableTree) *LableTreeDeleteOne {
	ltdo.ltd.mutation.Where(ps...)
	return ltdo
}

// Exec executes the deletion query.
func (ltdo *LableTreeDeleteOne) Exec(ctx context.Context) error {
	n, err := ltdo.ltd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{labletree.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ltdo *LableTreeDeleteOne) ExecX(ctx context.Context) {
	if err := ltdo.Exec(ctx); err != nil {
		panic(err)
	}
}
