// Code generated by ent, DO NOT EDIT.

package department

import (
	"sectran_admin/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldName, v))
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldArea, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldDescription, v))
}

// ParentDepartmentID applies equality check predicate on the "parent_department_id" field. It's identical to ParentDepartmentIDEQ.
func ParentDepartmentID(v uint64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartmentID, v))
}

// ParentDepartments applies equality check predicate on the "parent_departments" field. It's identical to ParentDepartmentsEQ.
func ParentDepartments(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartments, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldName, v))
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldArea, v))
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldArea, v))
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldArea, vs...))
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldArea, vs...))
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldArea, v))
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldArea, v))
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldArea, v))
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldArea, v))
}

// AreaContains applies the Contains predicate on the "area" field.
func AreaContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldArea, v))
}

// AreaHasPrefix applies the HasPrefix predicate on the "area" field.
func AreaHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldArea, v))
}

// AreaHasSuffix applies the HasSuffix predicate on the "area" field.
func AreaHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldArea, v))
}

// AreaEqualFold applies the EqualFold predicate on the "area" field.
func AreaEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldArea, v))
}

// AreaContainsFold applies the ContainsFold predicate on the "area" field.
func AreaContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldArea, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldDescription, v))
}

// ParentDepartmentIDEQ applies the EQ predicate on the "parent_department_id" field.
func ParentDepartmentIDEQ(v uint64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartmentID, v))
}

// ParentDepartmentIDNEQ applies the NEQ predicate on the "parent_department_id" field.
func ParentDepartmentIDNEQ(v uint64) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldParentDepartmentID, v))
}

// ParentDepartmentIDIn applies the In predicate on the "parent_department_id" field.
func ParentDepartmentIDIn(vs ...uint64) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldParentDepartmentID, vs...))
}

// ParentDepartmentIDNotIn applies the NotIn predicate on the "parent_department_id" field.
func ParentDepartmentIDNotIn(vs ...uint64) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldParentDepartmentID, vs...))
}

// ParentDepartmentIDGT applies the GT predicate on the "parent_department_id" field.
func ParentDepartmentIDGT(v uint64) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldParentDepartmentID, v))
}

// ParentDepartmentIDGTE applies the GTE predicate on the "parent_department_id" field.
func ParentDepartmentIDGTE(v uint64) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldParentDepartmentID, v))
}

// ParentDepartmentIDLT applies the LT predicate on the "parent_department_id" field.
func ParentDepartmentIDLT(v uint64) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldParentDepartmentID, v))
}

// ParentDepartmentIDLTE applies the LTE predicate on the "parent_department_id" field.
func ParentDepartmentIDLTE(v uint64) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldParentDepartmentID, v))
}

// ParentDepartmentsEQ applies the EQ predicate on the "parent_departments" field.
func ParentDepartmentsEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartments, v))
}

// ParentDepartmentsNEQ applies the NEQ predicate on the "parent_departments" field.
func ParentDepartmentsNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldParentDepartments, v))
}

// ParentDepartmentsIn applies the In predicate on the "parent_departments" field.
func ParentDepartmentsIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldParentDepartments, vs...))
}

// ParentDepartmentsNotIn applies the NotIn predicate on the "parent_departments" field.
func ParentDepartmentsNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldParentDepartments, vs...))
}

// ParentDepartmentsGT applies the GT predicate on the "parent_departments" field.
func ParentDepartmentsGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldParentDepartments, v))
}

// ParentDepartmentsGTE applies the GTE predicate on the "parent_departments" field.
func ParentDepartmentsGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldParentDepartments, v))
}

// ParentDepartmentsLT applies the LT predicate on the "parent_departments" field.
func ParentDepartmentsLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldParentDepartments, v))
}

// ParentDepartmentsLTE applies the LTE predicate on the "parent_departments" field.
func ParentDepartmentsLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldParentDepartments, v))
}

// ParentDepartmentsContains applies the Contains predicate on the "parent_departments" field.
func ParentDepartmentsContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldParentDepartments, v))
}

// ParentDepartmentsHasPrefix applies the HasPrefix predicate on the "parent_departments" field.
func ParentDepartmentsHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldParentDepartments, v))
}

// ParentDepartmentsHasSuffix applies the HasSuffix predicate on the "parent_departments" field.
func ParentDepartmentsHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldParentDepartments, v))
}

// ParentDepartmentsEqualFold applies the EqualFold predicate on the "parent_departments" field.
func ParentDepartmentsEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldParentDepartments, v))
}

// ParentDepartmentsContainsFold applies the ContainsFold predicate on the "parent_departments" field.
func ParentDepartmentsContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldParentDepartments, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Account) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Department) predicate.Department {
	return predicate.Department(sql.NotPredicates(p))
}
