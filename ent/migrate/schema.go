// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DepartmentsColumns holds the columns for the "departments" table.
	DepartmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Comment: "Create Time | 创建日期"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Update Time | 修改日期"},
		{Name: "name", Type: field.TypeString, Comment: "The name of the department."},
		{Name: "area", Type: field.TypeString, Comment: "The area where the department is located."},
		{Name: "description", Type: field.TypeString, Comment: "Description of the department."},
		{Name: "parent_departments_ids", Type: field.TypeString, Comment: "Comma-separated list of parent department IDs in ascending order."},
	}
	// DepartmentsTable holds the schema information for the "departments" table.
	DepartmentsTable = &schema.Table{
		Name:       "departments",
		Columns:    DepartmentsColumns,
		PrimaryKey: []*schema.Column{DepartmentsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Comment: "Create Time | 创建日期"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Update Time | 修改日期"},
		{Name: "name", Type: field.TypeString, Comment: "The name of the role."},
		{Name: "weight", Type: field.TypeInt, Comment: "The weight of the role. Smaller values indicate higher priority."},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Comment: "Create Time | 创建日期"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Update Time | 修改日期"},
		{Name: "account", Type: field.TypeString, Unique: true, Comment: "User account."},
		{Name: "name", Type: field.TypeString, Comment: "User name."},
		{Name: "password", Type: field.TypeString, Comment: "User password."},
		{Name: "status", Type: field.TypeBool, Comment: "User status (enabled(true) or disabled(false)).", Default: true},
		{Name: "description", Type: field.TypeString, Nullable: true, Comment: "User description."},
		{Name: "email", Type: field.TypeString, Nullable: true, Comment: "User email."},
		{Name: "phone_number", Type: field.TypeString, Nullable: true, Comment: "User phone number."},
		{Name: "department_id", Type: field.TypeUint64, Nullable: true, Comment: "ID of the user's department."},
		{Name: "role_id", Type: field.TypeUint64, Nullable: true, Comment: "ID of the user's role."},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_departments_departments",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{DepartmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_roles_roles",
				Columns:    []*schema.Column{UsersColumns[11]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DepartmentsTable,
		RolesTable,
		UsersTable,
	}
)

func init() {
	UsersTable.ForeignKeys[0].RefTable = DepartmentsTable
	UsersTable.ForeignKeys[1].RefTable = RolesTable
}
