// Code generated by ent, DO NOT EDIT.

package accesspolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the accesspolicy type in the database.
	Label = "access_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// FieldUsers holds the string denoting the users field in the database.
	FieldUsers = "users"
	// FieldAccounts holds the string denoting the accounts field in the database.
	FieldAccounts = "accounts"
	// FieldEffecteTimeStart holds the string denoting the effecte_time_start field in the database.
	FieldEffecteTimeStart = "effecte_time_start"
	// FieldEffecteTimeEnd holds the string denoting the effecte_time_end field in the database.
	FieldEffecteTimeEnd = "effecte_time_end"
	// Table holds the table name of the accesspolicy in the database.
	Table = "access_policies"
)

// Columns holds all SQL columns for accesspolicy fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldPower,
	FieldDepartmentID,
	FieldUsers,
	FieldAccounts,
	FieldEffecteTimeStart,
	FieldEffecteTimeEnd,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPower holds the default value on creation for the "power" field.
	DefaultPower int32
	// PowerValidator is a validator for the "power" field. It is called by the builders before save.
	PowerValidator func(int32) error
	// DepartmentIDValidator is a validator for the "department_id" field. It is called by the builders before save.
	DepartmentIDValidator func(uint64) error
	// UsersValidator is a validator for the "users" field. It is called by the builders before save.
	UsersValidator func(string) error
	// AccountsValidator is a validator for the "accounts" field. It is called by the builders before save.
	AccountsValidator func(string) error
	// DefaultEffecteTimeStart holds the default value on creation for the "effecte_time_start" field.
	DefaultEffecteTimeStart func() time.Time
	// UpdateDefaultEffecteTimeStart holds the default value on update for the "effecte_time_start" field.
	UpdateDefaultEffecteTimeStart func() time.Time
	// DefaultEffecteTimeEnd holds the default value on creation for the "effecte_time_end" field.
	DefaultEffecteTimeEnd time.Time
	// UpdateDefaultEffecteTimeEnd holds the default value on update for the "effecte_time_end" field.
	UpdateDefaultEffecteTimeEnd func() time.Time
)

// OrderOption defines the ordering options for the AccessPolicy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPower orders the results by the power field.
func ByPower(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPower, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByUsers orders the results by the users field.
func ByUsers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsers, opts...).ToFunc()
}

// ByAccounts orders the results by the accounts field.
func ByAccounts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccounts, opts...).ToFunc()
}

// ByEffecteTimeStart orders the results by the effecte_time_start field.
func ByEffecteTimeStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffecteTimeStart, opts...).ToFunc()
}

// ByEffecteTimeEnd orders the results by the effecte_time_end field.
func ByEffecteTimeEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffecteTimeEnd, opts...).ToFunc()
}
