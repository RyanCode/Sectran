// Code generated by ent, DO NOT EDIT.

package policyauth

import (
	"sectran_admin/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldName, v))
}

// Power applies equality check predicate on the "power" field. It's identical to PowerEQ.
func Power(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldPower, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldDepartmentID, v))
}

// Users applies equality check predicate on the "users" field. It's identical to UsersEQ.
func Users(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldUsers, v))
}

// Accounts applies equality check predicate on the "accounts" field. It's identical to AccountsEQ.
func Accounts(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldAccounts, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContainsFold(FieldName, v))
}

// PowerEQ applies the EQ predicate on the "power" field.
func PowerEQ(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldPower, v))
}

// PowerNEQ applies the NEQ predicate on the "power" field.
func PowerNEQ(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldPower, v))
}

// PowerIn applies the In predicate on the "power" field.
func PowerIn(vs ...int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldPower, vs...))
}

// PowerNotIn applies the NotIn predicate on the "power" field.
func PowerNotIn(vs ...int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldPower, vs...))
}

// PowerGT applies the GT predicate on the "power" field.
func PowerGT(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldPower, v))
}

// PowerGTE applies the GTE predicate on the "power" field.
func PowerGTE(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldPower, v))
}

// PowerLT applies the LT predicate on the "power" field.
func PowerLT(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldPower, v))
}

// PowerLTE applies the LTE predicate on the "power" field.
func PowerLTE(v int32) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldPower, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDGT applies the GT predicate on the "department_id" field.
func DepartmentIDGT(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldDepartmentID, v))
}

// DepartmentIDGTE applies the GTE predicate on the "department_id" field.
func DepartmentIDGTE(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldDepartmentID, v))
}

// DepartmentIDLT applies the LT predicate on the "department_id" field.
func DepartmentIDLT(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldDepartmentID, v))
}

// DepartmentIDLTE applies the LTE predicate on the "department_id" field.
func DepartmentIDLTE(v uint64) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldDepartmentID, v))
}

// DepartmentIDIsNil applies the IsNil predicate on the "department_id" field.
func DepartmentIDIsNil() predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIsNull(FieldDepartmentID))
}

// DepartmentIDNotNil applies the NotNil predicate on the "department_id" field.
func DepartmentIDNotNil() predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotNull(FieldDepartmentID))
}

// UsersEQ applies the EQ predicate on the "users" field.
func UsersEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldUsers, v))
}

// UsersNEQ applies the NEQ predicate on the "users" field.
func UsersNEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldUsers, v))
}

// UsersIn applies the In predicate on the "users" field.
func UsersIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldUsers, vs...))
}

// UsersNotIn applies the NotIn predicate on the "users" field.
func UsersNotIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldUsers, vs...))
}

// UsersGT applies the GT predicate on the "users" field.
func UsersGT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldUsers, v))
}

// UsersGTE applies the GTE predicate on the "users" field.
func UsersGTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldUsers, v))
}

// UsersLT applies the LT predicate on the "users" field.
func UsersLT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldUsers, v))
}

// UsersLTE applies the LTE predicate on the "users" field.
func UsersLTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldUsers, v))
}

// UsersContains applies the Contains predicate on the "users" field.
func UsersContains(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContains(FieldUsers, v))
}

// UsersHasPrefix applies the HasPrefix predicate on the "users" field.
func UsersHasPrefix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasPrefix(FieldUsers, v))
}

// UsersHasSuffix applies the HasSuffix predicate on the "users" field.
func UsersHasSuffix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasSuffix(FieldUsers, v))
}

// UsersEqualFold applies the EqualFold predicate on the "users" field.
func UsersEqualFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEqualFold(FieldUsers, v))
}

// UsersContainsFold applies the ContainsFold predicate on the "users" field.
func UsersContainsFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContainsFold(FieldUsers, v))
}

// AccountsEQ applies the EQ predicate on the "accounts" field.
func AccountsEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEQ(FieldAccounts, v))
}

// AccountsNEQ applies the NEQ predicate on the "accounts" field.
func AccountsNEQ(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNEQ(FieldAccounts, v))
}

// AccountsIn applies the In predicate on the "accounts" field.
func AccountsIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldIn(FieldAccounts, vs...))
}

// AccountsNotIn applies the NotIn predicate on the "accounts" field.
func AccountsNotIn(vs ...string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldNotIn(FieldAccounts, vs...))
}

// AccountsGT applies the GT predicate on the "accounts" field.
func AccountsGT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGT(FieldAccounts, v))
}

// AccountsGTE applies the GTE predicate on the "accounts" field.
func AccountsGTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldGTE(FieldAccounts, v))
}

// AccountsLT applies the LT predicate on the "accounts" field.
func AccountsLT(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLT(FieldAccounts, v))
}

// AccountsLTE applies the LTE predicate on the "accounts" field.
func AccountsLTE(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldLTE(FieldAccounts, v))
}

// AccountsContains applies the Contains predicate on the "accounts" field.
func AccountsContains(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContains(FieldAccounts, v))
}

// AccountsHasPrefix applies the HasPrefix predicate on the "accounts" field.
func AccountsHasPrefix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasPrefix(FieldAccounts, v))
}

// AccountsHasSuffix applies the HasSuffix predicate on the "accounts" field.
func AccountsHasSuffix(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldHasSuffix(FieldAccounts, v))
}

// AccountsEqualFold applies the EqualFold predicate on the "accounts" field.
func AccountsEqualFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldEqualFold(FieldAccounts, v))
}

// AccountsContainsFold applies the ContainsFold predicate on the "accounts" field.
func AccountsContainsFold(v string) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.FieldContainsFold(FieldAccounts, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PolicyAuth) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PolicyAuth) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PolicyAuth) predicate.PolicyAuth {
	return predicate.PolicyAuth(sql.NotPredicates(p))
}
